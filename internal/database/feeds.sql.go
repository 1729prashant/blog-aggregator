// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feeds.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const addFeed = `-- name: AddFeed :one
INSERT INTO feeds (id, created_at, updated_at, name, url, last_fetched_at, user_id)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
)
RETURNING id, created_at, updated_at, name, url, last_fetched_at, user_id
`

type AddFeedParams struct {
	ID            uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	Name          string
	Url           string
	LastFetchedAt sql.NullTime
	UserID        uuid.UUID
}

func (q *Queries) AddFeed(ctx context.Context, arg AddFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, addFeed,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Url,
		arg.LastFetchedAt,
		arg.UserID,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.LastFetchedAt,
		&i.UserID,
	)
	return i, err
}

const getAllFeeds = `-- name: GetAllFeeds :many


SELECT f.name, f.url, u.name
FROM feeds f, users u
where u.id = f.user_id
ORDER BY f.name
`

type GetAllFeedsRow struct {
	Name   string
	Url    string
	Name_2 string
}

func (q *Queries) GetAllFeeds(ctx context.Context) ([]GetAllFeedsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllFeedsRow
	for rows.Next() {
		var i GetAllFeedsRow
		if err := rows.Scan(&i.Name, &i.Url, &i.Name_2); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeed = `-- name: GetFeed :one


SELECT name FROM feeds WHERE name = $1 AND user_id = $2 LIMIT 1
`

type GetFeedParams struct {
	Name   string
	UserID uuid.UUID
}

func (q *Queries) GetFeed(ctx context.Context, arg GetFeedParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getFeed, arg.Name, arg.UserID)
	var name string
	err := row.Scan(&name)
	return name, err
}

const getFeedNamebyURL = `-- name: GetFeedNamebyURL :one


SELECT name, id FROM feeds WHERE url = $1 LIMIT 1
`

type GetFeedNamebyURLRow struct {
	Name string
	ID   uuid.UUID
}

func (q *Queries) GetFeedNamebyURL(ctx context.Context, url string) (GetFeedNamebyURLRow, error) {
	row := q.db.QueryRowContext(ctx, getFeedNamebyURL, url)
	var i GetFeedNamebyURLRow
	err := row.Scan(&i.Name, &i.ID)
	return i, err
}

const markFeedFetched = `-- name: MarkFeedFetched :exec



UPDATE feeds set last_fetched_at = $1, updated_at = $2
WHERE id = $3
`

type MarkFeedFetchedParams struct {
	LastFetchedAt sql.NullTime
	UpdatedAt     time.Time
	ID            uuid.UUID
}

func (q *Queries) MarkFeedFetched(ctx context.Context, arg MarkFeedFetchedParams) error {
	_, err := q.db.ExecContext(ctx, markFeedFetched, arg.LastFetchedAt, arg.UpdatedAt, arg.ID)
	return err
}
