// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feed_follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
INSERT INTO feed_follows (id, created_at, updated_at, user_id, feed_id)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
RETURNING id, created_at, updated_at, user_id, feed_id
`

type CreateFeedFollowParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i FeedFollow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
	)
	return i, err
}

const deleteFeedFollow = `-- name: DeleteFeedFollow :exec


DELETE FROM feed_follows WHERE feed_id = $1 AND user_id = $2
`

type DeleteFeedFollowParams struct {
	FeedID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteFeedFollow(ctx context.Context, arg DeleteFeedFollowParams) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollow, arg.FeedID, arg.UserID)
	return err
}

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many


SELECT f.name , u.name
FROM feed_follows ff, feeds f, users u 
WHERE ff.feed_id = f.id 
AND ff.user_id = u.id 
AND u.name = $1
`

type GetFeedFollowsForUserRow struct {
	Name   string
	Name_2 string
}

func (q *Queries) GetFeedFollowsForUser(ctx context.Context, name string) ([]GetFeedFollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsForUserRow
	for rows.Next() {
		var i GetFeedFollowsForUserRow
		if err := rows.Scan(&i.Name, &i.Name_2); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeedIDUserIDfromFollows = `-- name: GetFeedIDUserIDfromFollows :one


SELECT ff.feed_id , ff.user_id
FROM feed_follows ff, feeds f, users u 
WHERE ff.feed_id = f.id 
AND ff.user_id = u.id 
AND u.name = $1
AND f.url = $2
`

type GetFeedIDUserIDfromFollowsParams struct {
	Name string
	Url  string
}

type GetFeedIDUserIDfromFollowsRow struct {
	FeedID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) GetFeedIDUserIDfromFollows(ctx context.Context, arg GetFeedIDUserIDfromFollowsParams) (GetFeedIDUserIDfromFollowsRow, error) {
	row := q.db.QueryRowContext(ctx, getFeedIDUserIDfromFollows, arg.Name, arg.Url)
	var i GetFeedIDUserIDfromFollowsRow
	err := row.Scan(&i.FeedID, &i.UserID)
	return i, err
}

const getNextFeedToFetch = `-- name: GetNextFeedToFetch :one


SELECT f.url
FROM feed_follows ff, feeds f, users u 
WHERE ff.feed_id = f.id 
AND ff.user_id = u.id 
AND u.name = $1
ORDER BY last_fetched_at NULLS FIRST
LIMIT 1
`

func (q *Queries) GetNextFeedToFetch(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRowContext(ctx, getNextFeedToFetch, name)
	var url string
	err := row.Scan(&url)
	return url, err
}
